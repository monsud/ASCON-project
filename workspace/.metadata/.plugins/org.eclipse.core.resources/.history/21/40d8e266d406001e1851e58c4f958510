#include <stdio.h>
#include "xparameters.h"
#include "platform.h"
#include "xil_printf.h"
#include "xgpio.h"
#include "xil_types.h"
#include "xil_io.h"

#define ASCON_BASE_ADDR 0x40000000

// ASCON register offsets
#define ASCON_CTRL_REG_OFFSET 0x00
#define ASCON_STATUS_REG_OFFSET 0x04
#define ASCON_KEY_REG_OFFSET 0x4120
#define ASCON_NONCE_REG_OFFSET 0x4125
#define ASCON_PLAINTEXT_REG_OFFSET 0x4129
#define ASCON_CIPHERTEXT_REG_OFFSET 0x412D
#define ASCON_ENABLE_BIT 0x01

int main()
{
	init_platform();

    // Variables for input and output data
    u32 key[4] = {0x01234567, 0x89ABCDEF, 0xFEDCBA98, 0x76543210};
    u32 nonce[4] = {0xABCDEF01, 0x23456789, 0x543210FED, 0xCBA98765};
    u32 plaintext[4] = {0x01234567, 0x89ABCDEF, 0xFEDCBA98, 0x76543210};
    u32 ciphertext[4];

    // Reset ASCON
    Xil_Out32((ASCON_BASE_ADDR + ASCON_CTRL_REG_OFFSET), 0x0);

    // Load key, nonce, and plaintext
    for (int i = 0; i < 4; i++) {
        Xil_Out32((ASCON_BASE_ADDR + ASCON_KEY_REG_OFFSET + i*4), key[i]);
        Xil_Out32((ASCON_BASE_ADDR + ASCON_NONCE_REG_OFFSET + i*4), nonce[i]);
        Xil_Out32((ASCON_BASE_ADDR + ASCON_PLAINTEXT_REG_OFFSET + i*4), plaintext[i]);
    }

    // Start ASCON encryption
    Xil_Out32((ASCON_BASE_ADDR + ASCON_CTRL_REG_OFFSET), ASCON_ENABLE_BIT);

    // Wait for ASCON to complete
    while ((Xil_In32(ASCON_BASE_ADDR + ASCON_STATUS_REG_OFFSET) & ASCON_ENABLE_BIT) != 0) {}

    // Read ciphertext
    for (int i = 0; i < 4; i++) {
        ciphertext[i] = Xil_In32(ASCON_BASE_ADDR + ASCON_CIPHERTEXT_REG_OFFSET + i*4);
    }

    // Display the ciphertext
    for (int i = 0; i < 4; i++) {
        xil_printf("Ciphertext[%d]: 0x%08X\n", i, ciphertext[i]);
    }

    cleanup_platform();

    return 0;
}


